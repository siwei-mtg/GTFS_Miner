# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFS_miner
                                 A QGIS plugin
 Extraction facile des données GTFS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Wei SI Transamo
        email                : wei.si@transamo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QProgressBar
#import PyQtWebEngine
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GTFS_miner_dialog import GTFS_minerDialog
from .extraction_and_profiling import *
from .metadata_processing import * 
from .data_transformation import *
from .data_cleaning import *
from .data_consolidation import *
from .data_analysis import *
import os
from datetime import datetime
import time
import logging
import json
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication

class GTFS_miner:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GTFS_miner_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GTFS Miner')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GTFS_miner', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GTFS_miner/Resources/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GTFS Miner'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GTFS Miner'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_dir(self):
        input_dirname = QFileDialog.getExistingDirectory(self.dlg, "Sélectionnez le dossier des fichiers sources")
        if len(input_dirname) >0 :
            self.dlg.lineEdit_input.setText(input_dirname)

    def select_output_dir(self):
        output_dirname = QFileDialog.getExistingDirectory(self.dlg, "Sélectionnez le dossier des fichiers traités")
        if len(output_dirname) >0 :
            self.dlg.lineEdit_output.setText(output_dirname)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GTFS_minerDialog()
        # Initialize dialog interface
        self.dlg.initDialog()
        # Connect signals
        self.dlg.connectSignals(self.select_input_dir, self.select_output_dir, self.lancer) 
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        self.dlg.resetFields()
        self.dlg.disconnectSignals()

    def userInput(self):
        # User Input
        rawPath = self.dlg.lineEdit_input.text() # Input path of user selection
        output_path = self.dlg.lineEdit_output.text() # Output path of user selection
        time1 =self.dlg.timeEditDebutHPM.time() # User input time bin for periods
        time2 =self.dlg.timeEditFinHPM.time()
        time3 =self.dlg.timeEditDebutHPS.time()
        time4 =self.dlg.timeEditFinHPS.time()
        type_vac = self.dlg.comboBox_zonevac.currentText()
        debut_hpm = time1.hour()/24 + time1.hour()/24/60
        fin_hpm = time2.hour()/24 + time2.hour()/24/60
        debut_hps = time3.hour()/24 + time3.hour()/24/60
        fin_hps = time4.hour()/24 + time4.hour()/24/60
        user_inputs = {'rawPath':rawPath,
                       'output_path':output_path,
                       'type_vac':type_vac,
                       'debut_hpm':debut_hpm,
                       'fin_hpm':fin_hpm,
                       'debut_hps':debut_hps,
                       'fin_hps':fin_hps}
        return user_inputs

    def lancer(self):
        start_time = round(time.time(),2)
        # Read raw data
        user_inputs = self.userInput()
        
        rawPath = os.path.normpath(os.path.join(os.path.dirname(__file__), 'Resources/test_data_3/input'))
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: input path: {rawPath}")
        output_path = os.path.normpath(os.path.join(os.path.dirname(__file__), 'Resources/test_data_3/output'))
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: output path: {output_path}")
        # Set up logging to output directory
        meta_file_path = os.path.join(output_path, 'metadata.json')

        log_file_path = os.path.join(output_path, f"{datetime.now().strftime('%Y%m%d %H%M')}_traitement.log")

        logger = logging.getLogger("GTFS_miner")  # Use a consistent logger name for the entire application
        logger.setLevel(logging.DEBUG)        
        # File handler
        file_handler = logging.FileHandler(log_file_path)
        formatter = logging.Formatter('%(asctime)s:%(name)s:%(message)s')
        file_handler.setFormatter(formatter)       
        # Stream handler
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(formatter)    
        # Add handlers
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
        logger.info("Traitement des données GTFS commence...")

        # Lecture données brutes
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Début de la lecture des données brutes")
        raw,meta,dates,routeTypes = read_raw_GTFSdata(rawPath,self.plugin_dir)
        shapes_not_exist = raw.get('shapes') is None
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la lecture des données brutes")
        self.dlg.progressBar.setValue(5)

        # Write the data to a JSON file
        with open(meta_file_path, 'w', encoding='utf-8') as json_file:
            json.dump(meta, json_file, ensure_ascii=False, indent=4)
        logger.info(f"metadata json file wrote to {log_file_path}")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de l'écriture du fichier json.")

        # Update data quality tables 
        datasetQuality = datasetLevelInfo(meta)
        self.dlg.datasetQualityTableView(datasetQuality)

        tableQuality = tableLevelInfo(meta)
        self.dlg.tableQualityTableView(tableQuality)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la mise à jour des tables qualité des données")

        # Normalization
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Début de la normalisation des données brutes.")
        GTFS_norm = normalize_raw_data(raw)
        self.dlg.progressBar.setValue(10)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la normalisation des données brutes.")

        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Début de la création des tables enrichies et nettoyées...")
        # service date
        service_date = service_date_generate(GTFS_norm['calendar'],GTFS_norm['calendar_dates'],dates)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table service_date terminée.")

        # AP AG
        AP, AG, marker = ag_ap_generate_reshape(GTFS_norm['stops'])
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création des tables AP AG terminée.")
        # Itinéraire
        iti = itineraire_generate(GTFS_norm['stop_times'], AP, GTFS_norm['trips'])
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraire terminée.")
        # Itinéraire arc
        itiarc = itiarc_generate(iti,AG)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraire arc terminée.")
        # Course
        course = course_generate(iti)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table course terminée.")

        # Shapes : check existance shape and add info if so
        course_geom = shape_exist_condition(GTFS_norm,course,iti)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table course geom terminée.")
        # Sous lignes
        sl = sl_generate(course_geom,AG)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table sous ligne terminée.")
        self.dlg.progressBar.setValue(30)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la création des tables enrichies et nettoyées.")

        # Mise en formes des tables
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Début de la mise en forme des tables d'analyse...")
        # Lignes
        lignes = ligne_generate(sl,GTFS_norm['routes'] ,routeTypes)
        # Ligne - export
        lignes_export = consolidation_ligne(lignes,course_geom,AG)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Mise en forme de la table ligne terminée.")
        # sous ligne - export
        sl_export = consolidation_sl(sl, lignes)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Mise en forme de la table sous ligne terminée.")
        # Course - export
        course_export = consolidation_course(course_geom)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Mise en forme de la table course terminée.")
        # Itinéraire - export
        iti_export = consolidation_iti(iti,course_export)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Mise en forme de la table itinéraire terminée.")
        # Itinéraire arc - export
        itiarc_export = consolidation_iti_arc(itiarc,course_export)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Mise en forme de la table itinéraire arc terminée.")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la mise en forme des tables d'analyse...")

        self.dlg.progressBar.setValue(50)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Début de la création des tables analytiques...")
        # Service jour type
        type_vac = "Type_Jour_Vacances_A"
        service_jtype = service_jour_type_generate(service_date,course_export,type_vac)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table service jour type terminée.")
        # Passage par ag
        psg_ag =  nb_passage_ag(service_jtype, iti_export,AG,type_vac)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table passage ag terminée.")
        # Passage par arc
        psg_arc = passage_arc(itiarc_export, service_jtype, AG,type_vac)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table passage arc terminée.")
        # Nombre de course par ligne
        nb_crs_lignes = nb_course_ligne(service_jtype, course_export,type_vac, lignes_export)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table nb courses par ligne terminée.")
        # Kcc par ligne
        kcc_ligne = kcc_course_ligne(service_jtype, course_export,type_vac, lignes_export, shapes_not_exist)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table kcc par ligne terminée.")
        # Kcc par sous ligne
        kcc_sl = kcc_course_sl(service_jtype, course_export,type_vac, sl_export, shapes_not_exist)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table kcc par sous ligne terminée.")
        # Caractéristiques des sous-ligne
        carac_sl = caract_par_sl(service_jtype,course_export, user_inputs['debut_hpm'] , user_inputs['fin_hpm'], 
                                    user_inputs['debut_hps'] ,user_inputs['fin_hps'], type_vac,sl_export)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: création de la table caractéristics des sous ligne terminée.")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de la création des tables analytiques.")
        self.dlg.progressBar.setValue(70) 

        # Export des fichiers
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de l'export des tables...")    
        AG.to_csv(f"{output_path}/A_1_Arrets_Generiques.csv", sep=';', index = False)
        AP.to_csv(f"{output_path}/A_2_Arrets_Physiques.csv", sep=';', index = False)
        lignes_export.to_csv(f"{output_path}/B_1_Lignes.csv", sep=';', index = False)
        sl_export.to_csv(f"{output_path}/B_2_Sous_Lignes.csv", sep=';', index = False)
        course_export.to_csv(f"{output_path}/C_1_Courses.csv", sep=';', index = False)
        iti_export.to_csv(f"{output_path}/C_2_Itineraire.csv", sep=';', index = False)
        itiarc_export.to_csv(f"{output_path}/C_3_Itineraire_Arc.csv", sep=';', index = False)
        service_date.to_csv(f"{output_path}/D_1_Service_Dates.csv", sep=';', index = False)
        service_jtype.to_csv(f"{output_path}/D_2_Service_Jourtype.csv", sep=';', index = False)
        psg_ag.to_csv(f"{output_path}/E_1_Nombre_Passage_AG.csv", sep=';', index = False)
        psg_arc.to_csv(f"{output_path}/E_4_Nombre_Passage_Arc.csv", sep=';', index = False)
        nb_crs_lignes.to_csv(f"{output_path}/F_1_Nombre_Courses_Lignes.csv", sep=';', index = False)
        carac_sl.to_csv(f"{output_path}/F_2_Caract_SousLignes.csv", sep=';', index = False)
        kcc_ligne.to_csv(f"{output_path}/F_3_KCC_Lignes.csv", sep=';', index = False)
        kcc_sl.to_csv(f"{output_path}/F_4_KCC_Sous_Ligne.csv", sep=';', index = False)
        sl_export.to_file(f"{output_path}/G_1_Trace_Sous_Ligne.shp", driver="ESRI Shapefile")
        lignes_export.to_file(f"{output_path}/G_2_Trace_Ligne.shp", driver="ESRI Shapefile")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Fin de l'export des tables.")
        end_time = round(time.time(),2)
        duration = round(end_time - start_time)
        self.dlg.progressBar.setValue(100) 
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: temps passé total du traitement {duration} seconds.")
       
        # table visualization
        # self.dlg.test1TableView(lignes_export)
        # self.dlg.test2TableView(kcc_sl)
        # self.dlg.test3TableView(dates)
        # self.dlg.test4TableView(GTFS_norm['stop_times'].head(20))

        
        




