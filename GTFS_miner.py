# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFS_miner
                                 A QGIS plugin
 Extraction facile des données GTFS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Wei SI Transamo
        email                : wei.si@transamo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QObject
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog,QProgressBar
from qgis.core import Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GTFS_miner_dialog import GTFS_minerDialog
from .GTFS_algorithm import *
import os


class GTFS_miner:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GTFS_miner_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GTFS Miner')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GTFS_miner', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GTFS_miner/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GTFS Extraction'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GTFS Miner'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_input_dir(self):
        input_dirname = QFileDialog.getExistingDirectory(self.dlg, "Sélectionnez le dossier des fichiers sources")
        self.dlg.lineEdit_input.setText(input_dirname)

    def select_output_dir(self):
        output_dirname = QFileDialog.getExistingDirectory(self.dlg, "Sélectionnez le dossier des fichiers traités")
        self.dlg.lineEdit_output.setText(output_dirname)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GTFS_minerDialog()
        self.dlg.comboBox_zonevac.addItems(['Type_Jour_Vacances_A','Type_Jour_Vacances_B','Type_Jour_Vacances_C'])
        self.dlg.comboBoxJtypeHDW.addItems(['Lundi_Scolaire', 'Mardi_Scolaire', 'Mercredi_Scolaire','Jeudi_Scolaire','Vendredi_Scolaire',
            'Samedi_Scolaire', 'Dimanche_Scolaire','Semaine_Vacances','Samedi_Vacances', 'Dimanche_Vacances', 'Ferié'])
        self.dlg.progressBar.setMinimum(1)
        self.dlg.progressBar.setMaximum(100)
        self.dlg.progressBar.setValue(1)
        self.dlg.helpText.setText(
            'Hello ! Ce plugin (version alpha) permet de traiter automatiquement les données brutes GTFS.\
             \n\nPour commencer: Il faut lui indiquer le dossier des données d\'entrée où il y a l\'ensemble de fichier au format GTFS (agency, stops, etc..),\
              le dossier où vous voulez mettre les fichiers traités, ainsi que la zone de vacances où trouve le réseau.\
              \n\nMerci de ne pas cliquer inutilement pendant le calcul, car en fonction de la taille, le traitement peut être lourd\n\n\
              Par exemple: les GTFS des villes moyennes prennent seulement quelques seconds à calculer. En revanche,la base GTFS IDF, le temps peut aller jusqu\'à 5min (prenez un café ;).\
              \n\nPour l\'instant il se peut qu\'il y a des réseaux que le plugin n\'est pas capable de traiter. \
              Dans ce cas n\'hésitez pas à contacter Wei (wei.si@transamo.com).\n' )

        self.dlg.pushButton_input.clicked.connect(self.select_input_dir)
        self.dlg.pushButton_output.clicked.connect(self.select_output_dir)
        self.dlg.executeButton.clicked.connect(self.execute_gtfs)
        self.dlg.pushButtonSNCF.clicked.connect(self.execute_gtfs_sncf)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.dlg.lineEdit_input.clear()
            self.dlg.lineEdit_output.clear()
            self.dlg.progressText.clear()
            self.dlg.comboBox_zonevac.clear()
            self.dlg.comboBoxJtypeHDW.clear()
            self.dlg.pushButton_input.clicked.disconnect()
            self.dlg.pushButton_output.clicked.disconnect()
            self.dlg.executeButton.clicked.disconnect()
            self.dlg.pushButtonSNCF.clicked.disconnect()

    def execute_gtfs(self):
        # Read raw data
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Traitement des données GTFS commencé!")
        t0 = round(time.time(),2)
        # User Input
        rawPath = self.dlg.lineEdit_input.text()
        output_path = self.dlg.lineEdit_output.text()
        time1 =self.dlg.timeEditDebutHPM.time()
        time2 =self.dlg.timeEditFinHPM.time()
        time3 =self.dlg.timeEditDebutHPS.time()
        time4 =self.dlg.timeEditFinHPS.time()
        type_vac = self.dlg.comboBox_zonevac.currentText()
        choix_jour_type = self.dlg.comboBoxJtypeHDW.currentText()
        debut_hpm = time1.hour()/24 + time1.hour()/24/60
        fin_hpm = time2.hour()/24 + time2.hour()/24/60
        debut_hps = time3.hour()/24 + time3.hour()/24/60
        fin_hps = time4.hour()/24 + time4.hour()/24/60

        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Lire les données depuis le dossier choisi...")
        GTFS_norm, Dates, validite = read_input(rawPath,self.plugin_dir )
        self.dlg.progressBar.setValue(5)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Lecture des données brutes terminée.")
        stops = GTFS_norm['stops']
        routes = GTFS_norm['routes']
        stop_times = GTFS_norm['stop_times']
        trips = GTFS_norm['trips']
        calendar = GTFS_norm['calendar']
        calendar_dates = GTFS_norm['calendar_dates']
        route_id_coor= GTFS_norm['route_id_coor']
        trip_id_coor = GTFS_norm['trip_id_coor']
        ser_id_coor = GTFS_norm['ser_id_coor']
        del GTFS_norm
        # Create AG AP
        AP, AG, marker = ag_ap_generate_reshape(stops)
        del stops
        self.dlg.progressBar.setValue(10)
        nb_AP = str(len(AP))
        nb_AG = str(len(AG))
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création des arrêts génériques et physiques terminée.")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Les arrêts génériques sont générés avec {marker}.")
        self.dlg.progressText.append(f"Nombre d'arrêts génériques: {nb_AG}")
        self.dlg.progressText.append(f"Nombre d'arrêts physiques: {nb_AP}")
        # Create table ligne
        lignes = ligne_generate(routes)
        del routes
        self.dlg.progressBar.setValue(15)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table lignes terminée.")
        nb_lignes = str(len(lignes))
        self.dlg.progressText.append(f"Nombre de lignes: {nb_lignes}")
        # Create itineraire
        itineraire = itineraire_generate(stop_times, AP, trips)
        del stop_times
        del trips
        self.dlg.progressBar.setValue(50)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraires terminée.")
        # Create itineraire arc
        itineraire_arc = itiarc_generate(itineraire)
        self.dlg.progressBar.setValue(65)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraires arcs terminées.")
        # Create courses
        courses = course_generate(itineraire)
        self.dlg.progressBar.setValue(70)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table courses terminées.")
        # Create Sous lignes
        sous_ligne = sl_generate(courses)
        self.dlg.progressBar.setValue(75)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table sous lignes terminées.")
        nb_sl = str(len(sous_ligne))
        self.dlg.progressText.append("Nombre de sous lignes : " +  nb_sl)
        # Create service date et services jour type
        service_dates, msg = service_date_generate(calendar ,calendar_dates,validite,Dates)
        del calendar
        del calendar_dates
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: {msg}")
        self.dlg.progressBar.setValue(80)
        service_jour_type = service_jour_type_generate(service_dates,courses, type_vac)
        # Mise en forme
        lignes_export = MEF_ligne(lignes)
        courses_export = MEF_course(courses, route_id_coor,trip_id_coor,ser_id_coor)
        itineraire_export = MEF_iti(itineraire,route_id_coor,trip_id_coor,ser_id_coor)
        iti_arc_export = MEF_iti_arc(itineraire_arc,route_id_coor,trip_id_coor,ser_id_coor)
        sl_export = MEF_SL(sous_ligne,route_id_coor)
        service_dates_export = MEF_serdate(service_dates,ser_id_coor)
        service_jour_type_export = MEF_servjour(service_jour_type,route_id_coor,ser_id_coor,type_vac)
        self.dlg.progressBar.setValue(85)

        nb_passage_ag_typejour = nb_passage_ag(service_jour_type_export, itineraire_export, AG, type_vac)
        self.dlg.progressBar.setValue(90)
        nb_course_ligne_typejour = nb_course_ligne(service_jour_type_export, courses_export, type_vac)
        nb_course_sl_typejour = nb_course_sl(service_jour_type_export, courses_export, type_vac)
        headway = calcul_headway(service_jour_type_export,courses_export,debut_hpm , fin_hpm, debut_hps,fin_hps , choix_jour_type,type_vac)
        self.dlg.progressBar.setValue(95)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table service jour type terminées.")

        # Write output
        AG.to_csv(f'{output_path}/1_1_Arrêts_Génériques.csv', sep=';', index = False)
        AP.to_csv(f'{output_path}/1_2_Arrêts_Physiques.csv', sep=';', index = False)
        lignes_export.to_csv(f'{output_path}/2_1_Lignes.csv', sep=';', index = False)
        sl_export.to_csv(f'{output_path}/2_2_Sous_Lignes.csv', sep=';', index = False)
        itineraire_export.to_csv(f'{output_path}/3_1_Itinéraire.csv', sep=';', index = False)
        iti_arc_export.to_csv(f'{output_path}/3_2_Itinéraire_Arc.csv', sep=';', index = False)
        courses_export.to_csv(f'{output_path}/3_3_Courses.csv', sep=';', index = False)
        service_dates_export.to_csv(f'{output_path}/4_1_Service_Dates.csv', sep=';', index = False)
        service_jour_type_export.to_csv(f'{output_path}/4_2_Service_Jourtype.csv', sep=';', index = False)
        nb_passage_ag_typejour.to_csv(f'{output_path}/5_1_Nombre_Passage_AG.csv', sep=';', index = False)
        nb_course_ligne_typejour.to_csv(f'{output_path}/5_2_Nombre_Courses_Lignes.csv', sep=';', index = False)
        nb_course_sl_typejour.to_csv(f'{output_path}/5_3_Nombre_Courses_SousLignes.csv', sep=';', index = False)
        headway.to_csv(f'{output_path}/6_1_Fréquences_Périodes_SousLignes.csv', sep=';', index = False)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Export des tables traitées au {output_path} terminé!")

        # ########################################
        # listfile = ['1_1_Arrêts_Génériques','1_2_Arrêts_Physiques','2_1_Lignes','2_2_Sous_Lignes','3_1_Itinéraire',
        # '3_2_Itinéraire_Arc','3_3_Courses','4_1_Service_Dates','4_2_Service_Jourtype',
        # '5_1_Nombre_Passage_AG','5_2_Nombre_Courses_Lignes','5_3_Nombre_Courses_SousLignes' ]
        # access_path = f'{output_path}/GTFS.accdb'
        # shutil.copy(f'{self.plugin_dir}/Resources/GTFS.accdb', access_path)
        # for i in listfile:
        #     export_access(access_path, i, output_path)
        # for i in listfile:
        #     os.remove(f'{output_path}/{i}.csv')
        # ########################################
        t9 = time.time()
        success_message = f'Extraction terminée! Le petit a pris {round(t9 - t0)} seconds pour faire tout ce boulot. Donne lui un bravo :)'
        self.dlg.progressText.append(success_message)
        self.dlg.progressBar.setValue(100)

    def execute_gtfs_sncf(self):
         # Read raw data
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Traitement des données GTFS au format ferroviaire commencé!")
        t0 = round(time.time(),2)
        # User Input
        rawPath = self.dlg.lineEdit_input.text()
        output_path = self.dlg.lineEdit_output.text()
        time1 =self.dlg.timeEditDebutHPM.time()
        time2 =self.dlg.timeEditFinHPM.time()
        time3 =self.dlg.timeEditDebutHPS.time()
        time4 =self.dlg.timeEditFinHPS.time()
        type_vac = self.dlg.comboBox_zonevac.currentText()
        choix_jour_type = self.dlg.comboBoxJtypeHDW.currentText()
        debut_hpm = time1.hour()/24 + time1.hour()/24/60
        fin_hpm = time2.hour()/24 + time2.hour()/24/60
        debut_hps = time3.hour()/24 + time3.hour()/24/60
        fin_hps = time4.hour()/24 + time4.hour()/24/60

        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Lire les données depuis le dossier choisi...")
        GTFS_norm, Dates, validite = read_input(rawPath,self.plugin_dir )
        self.dlg.progressBar.setValue(5)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Lecture des données brutes terminée.")
        stops = GTFS_norm['stops']
        routes = GTFS_norm['routes']
        stop_times = GTFS_norm['stop_times']
        trips = GTFS_norm['trips']
        calendar = GTFS_norm['calendar']
        calendar_dates = GTFS_norm['calendar_dates']
        route_id_coor= GTFS_norm['route_id_coor']
        trip_id_coor = GTFS_norm['trip_id_coor']
        ser_id_coor = GTFS_norm['ser_id_coor']
        del GTFS_norm
        # Create AG AP
        AP, AG, marker = ag_ap_generate_reshape(stops)
        del stops
        self.dlg.progressBar.setValue(10)
        nb_AP = str(len(AP))
        nb_AG = str(len(AG))
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création des arrêts génériques et physiques terminée.")
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Les arrêts génériques sont générés avec {marker}.")
        self.dlg.progressText.append(f"Nombre d'arrêts génériques: {nb_AG}")
        self.dlg.progressText.append(f"Nombre d'arrêts physiques: {nb_AP}")
        # Create table ligne
        lignes = ligne_generate(routes)
        del routes
        self.dlg.progressBar.setValue(15)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table lignes terminée.")
        nb_lignes = str(len(lignes))
        self.dlg.progressText.append(f"Nombre de lignes: {nb_lignes}")
        # Create itineraire
        itineraire = itineraire_generate(stop_times, AP, trips)
        del stop_times
        del trips
        self.dlg.progressBar.setValue(50)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraires terminée.")
        # Create itineraire arc
        itineraire_arc = itiarc_generate(itineraire)
        self.dlg.progressBar.setValue(65)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table itinéraires arcs terminées.")
        # Create courses
        courses = course_generate(itineraire)
        self.dlg.progressBar.setValue(70)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table courses terminées.")
        # Create Sous lignes
        sous_ligne = sl_generate(courses)
        self.dlg.progressBar.setValue(75)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table sous lignes terminées.")
        nb_sl = str(len(sous_ligne))
        self.dlg.progressText.append("Nombre de sous lignes : " +  nb_sl)
        # Create service date et services jour type
        service_dates, msg = service_date_generate(calendar ,calendar_dates,validite,Dates)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: {msg}")
        self.dlg.progressBar.setValue(80)
        service_jour_type = service_jour_type_generate(service_dates,courses, type_vac)
        # Mise en forme
        lignes_export = MEF_ligne(lignes)
        courses_export = MEF_course_sncf(courses, route_id_coor,trip_id_coor,ser_id_coor)
        itineraire_export = MEF_iti_sncf(itineraire,courses_export,route_id_coor, ser_id_coor,trip_id_coor)
        iti_arc_export = MEF_iti_arc_sncf(itineraire_arc,courses_export,route_id_coor, ser_id_coor,trip_id_coor)
        sl_export = MEF_SL(sous_ligne,route_id_coor)
        service_dates_export = MEF_serdate(service_dates,ser_id_coor)
        service_jour_type_export = MEF_servjour(service_jour_type,route_id_coor,ser_id_coor,type_vac)
        self.dlg.progressBar.setValue(85)

        nb_passage_ag_typejour = nb_passage_ag(service_jour_type_export, itineraire_export, AG, type_vac)
        self.dlg.progressBar.setValue(90)
        nb_course_ligne_typejour = nb_course_ligne(service_jour_type_export, courses_export, type_vac)
        nb_course_sl_typejour = nb_course_sl(service_jour_type_export, courses_export, type_vac)
        headway = calcul_headway(service_jour_type_export,courses_export,debut_hpm , fin_hpm, debut_hps,fin_hps , choix_jour_type,type_vac)
        goal_onglet_train = GOAL_train(AG,courses_export,calendar,validite,lignes_export)
        goal_onglet_trainmarche = GOAL_trainmarche(iti_arc_export,goal_onglet_train)
        self.dlg.progressBar.setValue(95)
        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Création de la table service jour type terminées.")

        # Write output
        AG.to_csv(f'{output_path}/1_1_Arrêts_Génériques.csv', sep=';', index = False)
        AP.to_csv(f'{output_path}/1_2_Arrêts_Physiques.csv', sep=';', index = False)
        lignes_export.to_csv(f'{output_path}/2_1_Lignes.csv', sep=';', index = False)
        sl_export.to_csv(f'{output_path}/2_2_Sous_Lignes.csv', sep=';', index = False)
        itineraire_export.to_csv(f'{output_path}/3_1_Itinéraire.csv', sep=';', index = False)
        iti_arc_export.to_csv(f'{output_path}/3_2_Itinéraire_Arc.csv', sep=';', index = False)
        courses_export.to_csv(f'{output_path}/3_3_Courses.csv', sep=';', index = False)
        service_dates_export.to_csv(f'{output_path}/4_1_Service_Dates.csv', sep=';', index = False)
        service_jour_type_export.to_csv(f'{output_path}/4_2_Service_Jourtype.csv', sep=';', index = False)
        nb_passage_ag_typejour.to_csv(f'{output_path}/5_1_Nombre_Passage_AG.csv', sep=';', index = False)
        nb_course_ligne_typejour.to_csv(f'{output_path}/5_2_Nombre_Courses_Lignes.csv', sep=';', index = False)
        nb_course_sl_typejour.to_csv(f'{output_path}/5_3_Nombre_Courses_SousLignes.csv', sep=';', index = False)
        headway.to_csv(f'{output_path}/6_1_Fréquences_Périodes_SousLignes.csv', sep=';', index = False)
        goal_onglet_train.to_csv(f'{output_path}/7_1_GOAL_Onlet_Train.csv', sep=';', index = False)
        goal_onglet_trainmarche.to_csv(f'{output_path}/7_1_GOAL_Onlet_TrainMarche.csv', sep=';', index = False)

        self.dlg.progressText.append(f"{datetime.now():%H:%M:%S}: Export des tables traitées au {output_path} terminé!")

        # ########################################
        # listfile = ['1_1_Arrêts_Génériques','1_2_Arrêts_Physiques','2_1_Lignes','2_2_Sous_Lignes','3_1_Itinéraire',
        # '3_2_Itinéraire_Arc','3_3_Courses','4_1_Service_Dates','4_2_Service_Jourtype',
        # '5_1_Nombre_Passage_AG','5_2_Nombre_Courses_Lignes','5_3_Nombre_Courses_SousLignes' ]
        # access_path = f'{output_path}/GTFS.accdb'
        # shutil.copy(f'{self.plugin_dir}/Resources/GTFS.accdb', access_path)
        # for i in listfile:
        #     export_access(access_path, i, output_path)
        # for i in listfile:
        #     os.remove(f'{output_path}/{i}.csv')
        # ########################################
        t9 = time.time()
        success_message = f'Extraction terminée! Le petit a pris {round(t9 - t0)} seconds pour faire tout ce boulot. Donne lui un bravo :)'
        self.dlg.progressText.append(success_message)
        self.dlg.progressBar.setValue(100)
